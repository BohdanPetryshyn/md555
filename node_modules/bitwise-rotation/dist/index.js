'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/* eslint-disable no-bitwise */

// The operands of all bitwise operators are converted to signed 32-bit integers
// in two's complement format.
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers
const MAX_BIT_WIDTH = 32;
const MIN_BIT_WIDTH = 0;

const bitwiseRotation = bitWidth => {
  if (typeof bitWidth !== 'number') {
    throw new Error('Bit width must be a number');
  }

  if (bitWidth > MAX_BIT_WIDTH) {
    throw new Error(`Bit width too large; must be less than ${MAX_BIT_WIDTH}.`);
  }

  if (bitWidth < MIN_BIT_WIDTH) {
    throw new Error(`Bit width too small; must be greater than ${MIN_BIT_WIDTH}.`);
  }

  const bitMask = Math.pow(2, bitWidth) - 1;
  const maskedRotation = rotation => rotation & bitWidth - 1;

  return {
    ror: (value, r) => {
      const rotation = maskedRotation(r);
      return value >>> rotation | value << bitWidth - rotation & bitMask;
    },
    rol: (value, r) => {
      const rotation = maskedRotation(r);
      return value << rotation & bitMask | value >>> bitWidth - rotation;
    }
  };
};

var _bitwiseRotation = bitwiseRotation(MAX_BIT_WIDTH / 4);

const rorInt8 = _bitwiseRotation.ror;
const rolInt8 = _bitwiseRotation.rol;

var _bitwiseRotation2 = bitwiseRotation(MAX_BIT_WIDTH / 2);

const rorInt16 = _bitwiseRotation2.ror;
const rolInt16 = _bitwiseRotation2.rol;

var _bitwiseRotation3 = bitwiseRotation(MAX_BIT_WIDTH);

const rorInt32 = _bitwiseRotation3.ror;
const rolInt32 = _bitwiseRotation3.rol;

exports['default'] = bitwiseRotation;
exports.rorInt8 = rorInt8;
exports.rolInt8 = rolInt8;
exports.rorInt16 = rorInt16;
exports.rolInt16 = rolInt16;
exports.rorInt32 = rorInt32;
exports.rolInt32 = rolInt32;
